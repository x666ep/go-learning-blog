// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/go-learning-blog/v1/api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoLearningBlogServiceClient is the client API for GoLearningBlogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoLearningBlogServiceClient interface {
	GetPosts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Posts, error)
}

type goLearningBlogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoLearningBlogServiceClient(cc grpc.ClientConnInterface) GoLearningBlogServiceClient {
	return &goLearningBlogServiceClient{cc}
}

func (c *goLearningBlogServiceClient) GetPosts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Posts, error) {
	out := new(Posts)
	err := c.cc.Invoke(ctx, "/go_learning_blog.api.go_learning_blog.v1.GoLearningBlogService/GetPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoLearningBlogServiceServer is the server API for GoLearningBlogService service.
// All implementations must embed UnimplementedGoLearningBlogServiceServer
// for forward compatibility
type GoLearningBlogServiceServer interface {
	GetPosts(context.Context, *Empty) (*Posts, error)
	mustEmbedUnimplementedGoLearningBlogServiceServer()
}

// UnimplementedGoLearningBlogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoLearningBlogServiceServer struct {
}

func (UnimplementedGoLearningBlogServiceServer) GetPosts(context.Context, *Empty) (*Posts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosts not implemented")
}
func (UnimplementedGoLearningBlogServiceServer) mustEmbedUnimplementedGoLearningBlogServiceServer() {}

// UnsafeGoLearningBlogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoLearningBlogServiceServer will
// result in compilation errors.
type UnsafeGoLearningBlogServiceServer interface {
	mustEmbedUnimplementedGoLearningBlogServiceServer()
}

func RegisterGoLearningBlogServiceServer(s grpc.ServiceRegistrar, srv GoLearningBlogServiceServer) {
	s.RegisterService(&GoLearningBlogService_ServiceDesc, srv)
}

func _GoLearningBlogService_GetPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoLearningBlogServiceServer).GetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_learning_blog.api.go_learning_blog.v1.GoLearningBlogService/GetPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoLearningBlogServiceServer).GetPosts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GoLearningBlogService_ServiceDesc is the grpc.ServiceDesc for GoLearningBlogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoLearningBlogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_learning_blog.api.go_learning_blog.v1.GoLearningBlogService",
	HandlerType: (*GoLearningBlogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPosts",
			Handler:    _GoLearningBlogService_GetPosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/go-learning-blog/v1/api.proto",
}
